generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int                @id @default(autoincrement())
  email            String             @unique
  username         String             @unique
  password         String
  theme            String             @default("system")
  country          String?
  expoPushToken    String? 
  userChecklist    Checklist[]        @relation("UserChecklist")
  quizResults      QuizResults[]      @relation("UserResult")
  userBadge        UserBadge[]        @relation("UserBadge")
  userChecklistStatus  UserChecklistStatus[]

}

model DisasterNotificationLog {
  notification_id                  Int      @id @default(autoincrement())
  userId                           Int
  notification_disaster_id         String
  sent_at                          DateTime @default(now())

  @@unique([userId, disaster_details])
}


model Disaster {
  disaster_id   Int         @id @default(autoincrement())
  disaster_name String      @unique
  checklist     Checklist[] @relation("DisasterChecklist")
  quiz          Quiz[]      @relation("DisasterQuiz")
  title         ChecklistTitle[]  
}

model ChecklistTitle {
  title_id      Int      @id @default(autoincrement())
  disaster_id   Int
  title         String   
  disaster      Disaster     @relation(fields: [disaster_id], references: [disaster_id])
  templates     ChecklistTemplate[] 
  checklists    Checklist[]         
}


model Checklist {
  checklist_id   Int      @id @default(autoincrement())
  disaster_id    Int
  user_id        Int
  title_id       Int 
  checklist_item String
  disaster       Disaster         @relation("DisasterChecklist", fields: [disaster_id], references: [disaster_id])
  user           User             @relation("UserChecklist", fields: [user_id], references: [user_id])
  checklistTitle ChecklistTitle   @relation(fields: [title_id], references: [title_id])
  checklistStatus UserChecklistStatus[]
}


model ChecklistTemplate {
  template_id    Int        @id @default(autoincrement())
  title_id       Int
  checklist_item String
  checklistTitle ChecklistTitle @relation(fields: [title_id], references: [title_id])
  templateChecklistStatus UserChecklistStatus[]
}


model UserChecklistStatus {
  checklist_status_id            Int       @id @default(autoincrement())
  user_id       Int
  template_id   Int?      
  checklist_id  Int?      
  is_checked    Boolean   @default(false)
  user          User                 @relation(fields: [user_id], references: [user_id])
  template      ChecklistTemplate?   @relation(fields: [template_id], references: [template_id])
  checklist     Checklist?           @relation(fields: [checklist_id], references: [checklist_id])

  @@unique([user_id, template_id], name: "user_id_template_id")
  @@unique([user_id, checklist_id], name: "user_id_checklist_id")

}


model Country {
  country_id       Int                @id @default(autoincrement())
  country_name     String             @unique
  country_code     String             @unique
  emergencyContact EmergencyContact[] @relation("CountryContact")
}

model EmergencyContact {
  contact_id   Int     @id @default(autoincrement())
  country_id   Int
  police       String
  fire         String
  medical      String      
  description  String
  safety_guidelines String
  country      Country @relation("CountryContact", fields: [country_id], references: [country_id])

  @@unique([country_id, police, fire, medical]) 

}


model Quiz {
  quiz_id          Int             @id @default(autoincrement())
  disaster_id      Int
  quiz_title       String          @unique
  quiz_description String
  difficulty_level String
  disaster         Disaster        @relation("DisasterQuiz", fields: [disaster_id], references: [disaster_id])
  quizQuestions    QuizQuestions[] @relation("DisasterQuizQuestions")
  quizResults      QuizResults[]
}

model QuizQuestions {
  question_id Int          @id @default(autoincrement())
  quiz_id     Int
  question    String
  points      Int
  quizAnswer  QuizAnswer[] @relation("QuizAnswer")
  quiz        Quiz         @relation("DisasterQuizQuestions", fields: [quiz_id], references: [quiz_id])
}

model QuizAnswer {
  answer_id          Int           @id @default(autoincrement())
  question_id        Int
  answer_text        String
  is_correct         Boolean       @default(false)
  answer_explanation String?
  question           QuizQuestions @relation("QuizAnswer", fields: [question_id], references: [question_id])
}


model QuizResults {
  result_id Int  @id @default(autoincrement())
  user_id   Int
  quiz_id   Int
  score     Int
  user      User @relation("UserResult", fields: [user_id], references: [user_id])
  quiz      Quiz @relation(fields: [quiz_id], references: [quiz_id])

  @@unique([user_id, quiz_id]) 
  
}


model Badge {
  badge_id              Int         @id @default(autoincrement())
  badge_name            String      @unique
  description           String
  badge_image_filled    String
  badge_image_outline   String
  criteria              String
  earned_from           String
  userBadge       UserBadge[] @relation("Badge")
}

model UserBadge {
  user_badge_id Int      @id @default(autoincrement())
  user_id       Int
  badge_id      Int
  earned_at     DateTime @default(now())
  badge         Badge    @relation("Badge", fields: [badge_id], references: [badge_id])
  user          User     @relation("UserBadge", fields: [user_id], references: [user_id])

  @@unique([user_id, badge_id], name: "user_id_badge_id")
}
