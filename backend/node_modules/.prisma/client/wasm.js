
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  email: 'email',
  username: 'username',
  password: 'password',
  theme: 'theme',
  country: 'country'
};

exports.Prisma.DisasterScalarFieldEnum = {
  disaster_id: 'disaster_id',
  disaster_name: 'disaster_name'
};

exports.Prisma.ChecklistTitleScalarFieldEnum = {
  title_id: 'title_id',
  disaster_id: 'disaster_id',
  title: 'title'
};

exports.Prisma.ChecklistScalarFieldEnum = {
  checklist_id: 'checklist_id',
  disaster_id: 'disaster_id',
  user_id: 'user_id',
  title_id: 'title_id',
  checklist_item: 'checklist_item'
};

exports.Prisma.ChecklistTemplateScalarFieldEnum = {
  template_id: 'template_id',
  title_id: 'title_id',
  checklist_item: 'checklist_item'
};

exports.Prisma.UserChecklistStatusScalarFieldEnum = {
  checklist_status_id: 'checklist_status_id',
  user_id: 'user_id',
  template_id: 'template_id',
  checklist_id: 'checklist_id',
  is_checked: 'is_checked'
};

exports.Prisma.CountryScalarFieldEnum = {
  country_id: 'country_id',
  country_name: 'country_name',
  country_code: 'country_code'
};

exports.Prisma.EmergencyContactScalarFieldEnum = {
  contact_id: 'contact_id',
  country_id: 'country_id',
  police: 'police',
  fire: 'fire',
  medical: 'medical',
  description: 'description'
};

exports.Prisma.QuizScalarFieldEnum = {
  quiz_id: 'quiz_id',
  disaster_id: 'disaster_id',
  quiz_title: 'quiz_title',
  quiz_description: 'quiz_description',
  difficulty_level: 'difficulty_level'
};

exports.Prisma.QuizQuestionsScalarFieldEnum = {
  question_id: 'question_id',
  quiz_id: 'quiz_id',
  question: 'question',
  points: 'points'
};

exports.Prisma.QuizAnswerScalarFieldEnum = {
  answer_id: 'answer_id',
  question_id: 'question_id',
  answer_text: 'answer_text',
  is_correct: 'is_correct',
  answer_explanation: 'answer_explanation'
};

exports.Prisma.QuizResultsScalarFieldEnum = {
  result_id: 'result_id',
  user_id: 'user_id',
  quiz_id: 'quiz_id',
  score: 'score'
};

exports.Prisma.BadgeScalarFieldEnum = {
  badge_id: 'badge_id',
  badge_name: 'badge_name',
  description: 'description',
  badge_image: 'badge_image',
  criteria: 'criteria',
  earned_from: 'earned_from'
};

exports.Prisma.UserBadgeScalarFieldEnum = {
  user_badge_id: 'user_badge_id',
  user_id: 'user_id',
  badge_id: 'badge_id',
  earned_at: 'earned_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  User: 'User',
  Disaster: 'Disaster',
  ChecklistTitle: 'ChecklistTitle',
  Checklist: 'Checklist',
  ChecklistTemplate: 'ChecklistTemplate',
  UserChecklistStatus: 'UserChecklistStatus',
  Country: 'Country',
  EmergencyContact: 'EmergencyContact',
  Quiz: 'Quiz',
  QuizQuestions: 'QuizQuestions',
  QuizAnswer: 'QuizAnswer',
  QuizResults: 'QuizResults',
  Badge: 'Badge',
  UserBadge: 'UserBadge'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
