// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id          Int                @id @default(autoincrement())
  email            String             @unique
  username         String             @unique
  password         String
  profileImage     String?
  Checklist        Checklist[]        @relation("UserChecklist")
  EmergencyContact EmergencyContact[] @relation("UserAccessEmergencyContact")
  QuizResult       QuizResult[]       @relation("UserQuizResult")
  UserBadge        UserBadge[]        @relation("UserBadge")
}

model Country {
  country_id       Int                @id @default(autoincrement())
  country_name     String             @unique
  country_code     String             @unique
  EmergencyContact EmergencyContact[] @relation("CountryEmergencyContact")
}

model EmergencyContact {
  contact_id   Int     @id @default(autoincrement())
  country_id   Int
  user_id      Int
  service_type String
  phone_number String
  country      Country @relation("CountryEmergencyContact", fields: [country_id], references: [country_id])
  user         User    @relation("UserAccessEmergencyContact", fields: [user_id], references: [user_id])
}

model Disaster {
  disaster_id   Int         @id @default(autoincrement())
  disaster_name String
  Checklist     Checklist[] @relation("Checklist")
  Quiz          Quiz[]      @relation("DisasterQuiz")
}

model Checklist {
  checklist_id   Int      @id @default(autoincrement())
  disaster_id    Int
  user_id        Int
  checklist_item String
  disaster       Disaster @relation("Checklist", fields: [disaster_id], references: [disaster_id])
  user           User     @relation("UserChecklist", fields: [user_id], references: [user_id])
}

model Quiz {
  quiz_id          Int            @id @default(autoincrement())
  disaster_id      Int
  quiz_title       String
  quiz_description String
  difficulty_level String
  disaster         Disaster       @relation("DisasterQuiz", fields: [disaster_id], references: [disaster_id])
  QuizQuestion     QuizQuestion[] @relation("Quiz")
  QuizResult       QuizResult[]   @relation("QuizResult")
}

model QuizQuestion {
  question_id Int          @id @default(autoincrement())
  quiz_id     Int
  question    String
  points      String
  quiz        Quiz         @relation("Quiz", fields: [quiz_id], references: [quiz_id])
  QuizAnswer  QuizAnswer[] @relation("QuizAnswer")
}

model QuizAnswer {
  answer_id    Int          @id @default(autoincrement())
  question_id  Int
  answer_text  String
  is_correct   Boolean      @default(false)
  quizQuestion QuizQuestion @relation("QuizAnswer", fields: [question_id], references: [question_id])
}

model QuizResult {
  result_id Int         @id @default(autoincrement())
  user_id   Int
  quiz_id   Int
  score     Int
  quiz      Quiz        @relation("QuizResult", fields: [quiz_id], references: [quiz_id])
  user      User        @relation("UserQuizResult", fields: [user_id], references: [user_id])
  UserBadge UserBadge[] @relation("UserResult")
}

model Badge {
  badge_id          Int         @id @default(autoincrement())
  bade_name         String
  badge_description String
  badge_image       String
  criteria          String
  UserBadge         UserBadge[] @relation("Badge")
}

model UserBadge {
  user_badge_id Int        @id @default(autoincrement())
  user_id       Int
  badge_id      Int
  result_id     Int
  earned_at     DateTime   @default(now())
  user          User       @relation("UserBadge", fields: [user_id], references: [user_id])
  badge         Badge      @relation("Badge", fields: [badge_id], references: [badge_id])
  result        QuizResult @relation("UserResult", fields: [result_id], references: [result_id])
}
